@model BlogApp.Web.Models.ArticleViewModel

@{
    ViewData["Title"] = Model.Title;
    bool canRank = ViewBag.CanRank ?? false;
    int? userVote = Model.CurrentUserVote;
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<article>
    <header class="mb-4">
        <h1>@Html.DisplayFor(model => model.Title)</h1>
        <div class="d-flex justify-content-between align-items-center">
            <p class="text-muted mb-0">
                Published on @Model.PublishedDate.ToString("MMMM dd, yyyy 'at' h:mm tt")
                by @Model.AuthorName
                @if (!string.IsNullOrEmpty(Model.AuthorProfilePictureUrl))
                {
                    <img src="@Model.AuthorProfilePictureUrl" alt="@Model.AuthorName" class="rounded-circle ms-1" style="width: 25px; height: 25px; object-fit: cover;" />
                }
            </p>

            @* --- Score and Voting Section --- *@
            <div class="text-end">
                @* Align right *@
                <span class="me-3">Score: <strong class="fs-5 @(Model.Score > 0 ? "text-success" : (Model.Score < 0 ? "text-danger" : ""))">@Model.Score</strong></span>

                @if (canRank) @* Show voting buttons only if user can rank *@
                {
                    @* Upvote Button/Form *@
                    <form asp-action="Vote" method="post" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.Id" />
                        <input type="hidden" name="voteValue" value="1" /> @* Value for upvote *@
                        <button type="submit" class="btn btn-sm @(userVote == 1 ? "btn-success" : "btn-outline-success")" title="Upvote">
                            <i class="bi bi-arrow-up-circle-fill"></i>
                            @* ▲ Upvote *@
                        </button>
                    </form>

                    @* Downvote Button/Form *@
                    <form asp-action="Vote" method="post" class="d-inline ms-1">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="articleId" value="@Model.Id" />
                        <input type="hidden" name="voteValue" value="-1" /> @* Value for downvote *@
                        <button type="submit" class="btn btn-sm @(userVote == -1 ? "btn-danger" : "btn-outline-danger")" title="Downvote">
                            <i class="bi bi-arrow-down-circle-fill"></i>
                            @* ▼ Downvote *@
                        </button>
                    </form>
                }
            </div>
        </div>

        @if (!Model.IsPublished)
        {
            <p><span class="badge bg-warning text-dark">Draft / Not Published</span></p>
        }
    </header>

    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <figure class="mb-4 text-center"> @* Center the image *@
    <img src="@Model.ImageUrl" alt="@Model.Title" class="img-fluid rounded shadow-sm" /> @* Make image responsive and add shadow *@
    </figure>
    }

    <section class="article-content">
        @Html.Raw(Model.Content)
    </section>
</article>

<hr class="my-4" />

@* Action buttons section *@
<div class="d-flex justify-content-between align-items-center">
    <div>
        @if (Model.CanModify)
        {
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-secondary me-2">Edit</a>
            @* Button to trigger delete confirmation modal (or link to delete page) *@
            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
            @* OR use a button to trigger a Bootstrap modal for confirmation *@
            @* <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button> *@
        }
    </div>
    <div>
        <a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
    </div>
</div>